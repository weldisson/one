const FormData = require('form-data');
const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch');

async function testVideoAPI() {
  const API_URL = 'http://localhost:3002';

  try {
    console.log('üß™ Testando API de gera√ß√£o de v√≠deos...\n');

    // Verificar se a API est√° online
    console.log('1. Verificando status da API...');
    const statusResponse = await fetch(`${API_URL}/api/status`);
    const statusData = await statusResponse.json();
    console.log('‚úÖ Status:', statusData.message);
    console.log('üìÖ Timestamp:', statusData.timestamp);
    console.log('üé® Efeitos dispon√≠veis:', statusData.availableEffects.join(', '), '\n');

    // Listar efeitos de transi√ß√£o dispon√≠veis
    console.log('2. Consultando efeitos de transi√ß√£o...');
    const effectsResponse = await fetch(`${API_URL}/api/transition-effects`);
    const effectsData = await effectsResponse.json();
    console.log('üé¨ Efeitos de transi√ß√£o:');
    effectsData.effects.forEach(effect => {
      console.log(`   ‚Ä¢ ${effect.id}: ${effect.description}`);
    });
    console.log('');

    // Preparar FormData para upload
    const form = new FormData();

    // Adicionar arquivos de exemplo (voc√™ precisa ter esses arquivos)
    // Substitua pelos caminhos dos seus arquivos de teste
    const primaryAudioPath = './examples/oracao.mp3'; // √Åudio principal (narra√ß√£o/ora√ß√£o)
    const secondaryAudioPath = './examples/musica.MP3'; // √Åudio secund√°rio (m√∫sica de fundo)
    const imagePaths = [
      './examples/01.png',
      './examples/02.png',
      './examples/03.png',
      './examples/04.png',
      './examples/05.png',
    ];

    // Verificar se os arquivos existem
    if (!fs.existsSync(primaryAudioPath)) {
      console.log('‚ö†Ô∏è  Arquivo de √°udio prim√°rio n√£o encontrado:', primaryAudioPath);
      console.log('üí° Coloque um arquivo de √°udio em:', primaryAudioPath);
      console.log('üí° Ou substitua o caminho no script test-api.js');
      console.log('');
      console.log('üîß Para testar rapidamente, voc√™ pode baixar arquivos de exemplo:');
      console.log('   mkdir -p examples');
      console.log('   # Baixe um √°udio MP3 (ora√ß√£o) e algumas imagens PNG para a pasta examples/');
      return;
    }

    console.log('3. Adicionando √°udio prim√°rio ao FormData...');
    form.append('primaryAudio', fs.createReadStream(primaryAudioPath));

    // Adicionar √°udio secund√°rio se existir
    if (fs.existsSync(secondaryAudioPath)) {
      console.log('4. Adicionando √°udio secund√°rio ao FormData...');
      form.append('secondaryAudio', fs.createReadStream(secondaryAudioPath));
    } else {
      console.log('4. ‚ö†Ô∏è  √Åudio secund√°rio n√£o encontrado:', secondaryAudioPath);
      console.log('   üí° Continuando apenas com √°udio prim√°rio...');
    }

    console.log('5. Adicionando imagens ao FormData...');
    let imageCount = 0;
    for (const imagePath of imagePaths) {
      if (fs.existsSync(imagePath)) {
        form.append('images', fs.createReadStream(imagePath));
        imageCount++;
        console.log(`   ‚úÖ Adicionada: ${path.basename(imagePath)}`);
      } else {
        console.log(`   ‚ö†Ô∏è  N√£o encontrada: ${imagePath}`);
      }
    }

    if (imageCount === 0) {
      console.log('‚ùå Nenhuma imagem encontrada.');
      console.log('üí° Coloque imagens de exemplo na pasta examples/');
      console.log('üí° Ou substitua os caminhos no script test-api.js');
      return;
    }

    // Par√¢metros opcionais - incluindo controle de volume e efeito de transi√ß√£o
    form.append('imageDuration', '4'); // 4 segundos por imagem
    form.append('transitionDuration', '1.5'); // 1.5 segundos de transi√ß√£o
    form.append('primaryAudioVolume', '1.0'); // Volume m√°ximo para ora√ß√£o
    form.append('secondaryAudioVolume', '0.2'); // Volume baixo para m√∫sica de fundo
    form.append('transitionEffect', 'zoom-out'); // Efeito zoom-out (120% para 100%)
    form.append('fps', '30');
    form.append('width', '1080'); // Formato 9:16 (vertical)
    form.append('height', '1920');
    console.log(`\n6. Enviando requisi√ß√£o para criar v√≠deo...`);
    console.log(`üìä Dados: ${imageCount} imagens + √°udios (prim√°rio: vol 1.0, secund√°rio: vol 0.2)`);
    console.log(`üé¨ Efeito: zoom-out (120% ‚Üí 100%)`);

    const videoResponse = await fetch(`${API_URL}/api/create-video`, {
      method: 'POST',
      body: form,
      headers: form.getHeaders(),
    });

    if (!videoResponse.ok) {
      const errorData = await videoResponse.json();
      console.error('‚ùå Erro na API:', errorData);
      return;
    }

    const videoData = await videoResponse.json();
    console.log('\n‚úÖ V√≠deo criado com sucesso!');
    console.log('üìã Informa√ß√µes do v√≠deo:');
    console.log('   üìÅ Nome:', videoData.video.filename);
    console.log('   üíæ Tamanho:', Math.round(videoData.video.size / 1024 / 1024), 'MB');
    console.log('   ‚è±Ô∏è  Dura√ß√£o:', videoData.video.duration, 'segundos');
    console.log('   üìê Resolu√ß√£o:', `${videoData.video.specs.width}x${videoData.video.specs.height}`);
    console.log('   üé¨ FPS:', videoData.video.specs.fps);
    console.log('   üé® Efeito:', videoData.video.specs.transitionEffect);
    console.log('   üñºÔ∏è  Imagens:', videoData.video.imagesCount);
    
    // Mostrar informa√ß√µes dos √°udios
    console.log('   üéµ √Åudios:');
    console.log(`      üì¢ Prim√°rio: ${videoData.video.audioTracks.primary.filename} (vol: ${videoData.video.audioTracks.primary.volume})`);
    if (videoData.video.audioTracks.secondary) {
      console.log(`      üé∂ Secund√°rio: ${videoData.video.audioTracks.secondary.filename} (vol: ${videoData.video.audioTracks.secondary.volume})`);
    }

    console.log('\n7. Baixando v√≠deo...');
    const downloadUrl = `${API_URL}${videoData.video.path}`;
    const downloadResponse = await fetch(downloadUrl);

    if (downloadResponse.ok) {
      const buffer = await downloadResponse.buffer();
      const outputPath = `./downloaded-${videoData.video.filename}`;
      fs.writeFileSync(outputPath, buffer);
      console.log('‚úÖ V√≠deo baixado para:', outputPath);
    } else {
      console.log('‚ùå Erro ao baixar v√≠deo');
    }

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
}

// Verificar se node-fetch e form-data est√£o instalados
try {
  require('node-fetch');
  require('form-data');
} catch (error) {
  console.log('üì¶ Instalando depend√™ncias necess√°rias...');
  console.log('Execute: npm install');
  process.exit(1);
}

// Executar teste
testVideoAPI(); 